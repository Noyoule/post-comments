/api/v1/post:
  post:
    security:
      - bearerAuth: []
    summary: Create a new post
    tags:
      - Post
    requestBody:
      description: A json object to create the Post
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              content:
                type: string
              medias:
                type: array
                items:
                  type: string
                  format: binary
            required:
              - content
          encoding:
            medias:
              style: form
              explode: true
    responses:
      "200":
        description: Post created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      "401":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unauthorized"
/api/v1/post/like/toggle/{postId}:
  post:
    security:
      - bearerAuth: []
    summary: Like a post
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        required: true
        description: Numeric ID of the post to like
    tags:
      - Post
    responses:
      "200":
        description: Post created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      "401":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unauthorized"
/api/v1/post/delete/{postId}:
  delete:
    security:
      - bearerAuth: []
    summary: Delete a post
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        required: true
        description: Numeric ID of the post to delete
    tags:
      - Post
    responses:
      "200":
        description: Post delete successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      "401":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unauthorized"
/api/v1/post/{postId}:
  get:
    security:
      - bearerAuth: []
    summary: Get a post whit the id passed in parameters
    parameters:
      - in: path
        name: postId
        schema:
          type: integer
        required: true
        description: Numeric ID of the post to get
    tags:
      - Post
    responses:
      "200":
        description: Post get successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPost"
      "401":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unauthorized"
/api/v1/posts:
  get:
    security:
      - bearerAuth: []
    summary: Get a paginate list of all post
    parameters:
      - in: query
        name: page
        schema:
          type: integer
        required: false
        description: parameter to specify the current page
      - in: query
        name: limit
        schema:
          type: integer
        required: false
        description: parameter to specify the limit of the data returned for each page
    tags:
      - Post
    responses:
      "200":
        description: Posts get successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPost"
      "401":
        description: Bad request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Unauthorized"
components:
  schemas:
    GetPost:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            avatar:
              type: string
              example: path/to/avatar.jpg
          required:
            - name
            - avatar
        content:
          type: string
          example: Post content goes here
        likes:
          type: integer
          example: 42
        medias:
          type: array
          items:
            type: string
            example: path/to/media1.jpg
          example: ["path/to/media1.jpg", "path/to/media2.jpg"]
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          example:
            - user:
                name: Jane Smith
                avatar: path/to/avatar.jpg
              content: Comment 1
              created_at: "2023-10-01T12:34:56"
            - user:
                name: Bob Johnson
                avatar: path/to/avatar.jpg
              content: Comment 2
              created_at: null
